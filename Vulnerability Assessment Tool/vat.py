import nmap
import requests
from urllib.parse import urlparse
from bs4 import BeautifulSoup
import time
from tqdm import tqdm
from tabulate import tabulate

def assess_vulnerability(port, service, version):
    # Dictionary containing vulnerabilities for specific ports
    vulnerabilities = {
        21: ("FTP (File Transfer Protocol) is vulnerable to brute-force attacks. Ensure strong passwords and limit access.",
             ["1.3.3", "1.3.4", "1.3.5"]),  # Example vulnerable versions for FTP
        22: ("SSH (Secure Shell) can be secure, but ensure strong passwords, key-based authentication, and regular security audits.",
             ["5.2", "5.3"]),  # Example vulnerable versions for SSH
        23: ("Telnet is insecure and transmits data in plaintext. Avoid using Telnet and switch to SSH.",
             []),
        25: ("SMTP (Simple Mail Transfer Protocol) can be exploited for email spoofing and spamming. Implement proper email authentication mechanisms.",
             []),
        53: ("DNS (Domain Name System) can be vulnerable to DNS spoofing attacks. Implement DNSSEC (Domain Name System Security Extensions) for added security.",
             []),
        80: ("HTTP is a common target for attacks. Ensure proper security measures such as input validation, output encoding, and HTTPS usage.",
             []),
        110: ("POP3 (Post Office Protocol version 3) can expose email credentials if not encrypted. Use POP3S (POP3 Secure) or IMAP (Internet Message Access Protocol) with SSL/TLS.",
              []),
        143: ("IMAP (Internet Message Access Protocol) can expose email credentials if not encrypted. Use IMAPS (IMAP Secure) or POP3S (POP3 Secure) with SSL/TLS.",
              []),
        443: ("HTTPS (HTTP Secure) is generally secure, but ensure certificates are up-to-date, valid, and use strong encryption algorithms.",
              []),
        3306: ("MySQL databases are often targeted for SQL injection attacks. Use parameterized queries and enforce strong passwords.",
              []),
        3389: ("RDP (Remote Desktop Protocol) is vulnerable to brute-force attacks. Implement account lockout policies and use VPNs (Virtual Private Networks) for remote access.",
              []),
        5432: ("PostgreSQL databases can be targeted for SQL injection attacks. Secure PostgreSQL by restricting network access and using strong authentication methods.",
              []),
        5900: ("VNC (Virtual Network Computing) is vulnerable to eavesdropping and brute-force attacks. Use VNC over SSH or VPNs for secure remote access.",
              []),
        8080: ("Commonly used for web servers and often misconfigured. Ensure proper access controls, authentication mechanisms, and security patches.",
              [])
        # Add more vulnerabilities as needed
    }

    # Check if the port has a known vulnerability message
    if port in vulnerabilities:
        vulnerability_message, vulnerable_versions = vulnerabilities[port]
        vulnerability_level = "High" if version in vulnerable_versions else "Low"
        if version in vulnerable_versions:
            warning = f"Warning: Version {version} of {service} is vulnerable."
        else:
            warning = ""
    else:
        vulnerability_level = "Low"
        vulnerability_message = "No known high-risk vulnerabilities for this port/service."
        warning = ""

    return vulnerability_level, vulnerability_message, warning



def scan_network(ip):
    try:
        # Initialize the Nmap PortScanner
        nm = nmap.PortScanner()
        
        print(f"\nStarting network scan on IP: {ip}\n")
        
        # Simulate progress
        for i in tqdm(range(100), desc="Scanning network", unit="%"):
            time.sleep(0.05)  # Simulate work being done
            
        # Scan the target IP address with service version detection
        nm.scan(ip, arguments='-sV')  # -sV: Probe open ports to determine service/version info
        
        # Extract scan results
        scan_summary = []
        
        for host in nm.all_hosts():
            for proto in nm[host].all_protocols():
                lport = nm[host][proto].keys()
                for port in sorted(lport):
                    state = nm[host][proto][port]['state']
                    service = nm[host][proto][port]['name']
                    version = nm[host][proto][port]['version']
                    
                    # Assess vulnerability
                    vuln_level, vuln_msg, warning = assess_vulnerability(port, service, version)
                    scan_summary.append([port, proto, service, version, state, vuln_level, vuln_msg, warning])
        
        # Print scan summary
        headers = ["Port", "Protocol", "Service", "Version", "State", "Vulnerability Level", "Message", "Warning"]
        print("\n--- Network Scan Summary ---")
        print(tabulate(scan_summary, headers=headers, tablefmt="fancy_grid"))
    except nmap.PortScannerError as e:
        print(f"Nmap error: {e}")
    except Exception as e:
        print(f"Error: {e}")


def scan_url(url):
    try:
        print(f"Starting URL scan on: {url}")
        
        # Simulate progress
        for i in tqdm(range(100), desc="Scanning URL", unit="%"):
            time.sleep(0.05)  # Simulate work being done
            
        response = requests.get(url)
        
        # Determine number of checks to perform for progress bar
        total_checks = 4  # Status code, headers, page title, and security headers
        
        scan_summary = []
        
        # Progress bar update for status code
        status_code = response.status_code
        scan_summary.append(["Status Code", status_code, "N/A", "N/A"])
        
        # Progress bar update for headers
        headers = response.headers
        header_str = '\n'.join([f"{k}: {v}" for k, v in headers.items()])
        scan_summary.append(["Headers", header_str, "N/A", "N/A"])
        
        # Parse HTML content
        soup = BeautifulSoup(response.text, 'html.parser')
        title = soup.title.string if soup.title else 'No title found'
        scan_summary.append(["Page Title", title, "N/A", "N/A"])
        
        # Check for common security headers
        security_headers = ['Content-Security-Policy', 'X-Content-Type-Options', 'X-Frame-Options', 'Strict-Transport-Security']
        missing_headers = [header for header in security_headers if header not in response.headers]
        
        vuln_level = "Low" if not missing_headers else "High"
        vuln_msg = "All security headers present." if not missing_headers else f"Missing security headers: {', '.join(missing_headers)}"
        
        scan_summary.append(["Security Headers", "Present" if not missing_headers else "Missing", vuln_level, vuln_msg])
        
        # Print vulnerability summary
        headers = ["Check", "Result", "Vulnerability Level", "Message"]
        print("\n--- URL Scan Summary ---")
        print(tabulate(scan_summary, headers=headers, tablefmt="fancy_grid"))
    except requests.RequestException as e:
        print(f"Error scanning URL: {e}")

if __name__ == "__main__":
    target = input("Enter the IP address or URL to scan: ")
    
    if target.startswith(('http://', 'https://')):
        scan_url(target)
    else:
        scan_network(target)
